---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Continuous Delivery pipeline for static website'
Parameters:
  BranchName:
    Description: CodeCommit branch name
    Type: String
    Default: master
  RepositoryName:
    Description: CodeComit repository name
    Type: String
    Default: myrepo
  BucketName:
    Description: 'The S3 bucket name for lambda deployment.'
    Type: String
  VPC:
    Description: 'The VPC Id to launch the EC2 instance in.'
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: 'The Subnet Id to launch the EC2 instance in.'
    Type: AWS::EC2::Subnet::Id
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-cacbbea5'
    'eu-west-1':
      AMI: 'ami-d41d58a7'
Resources:
  ArtifactStore:
    Type: "AWS::S3::Bucket"
    Properties: 
      VersioningConfiguration:
        Status: Enabled
  CodePipelineIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
            Effect: Allow
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - ec2:*
            - cloudwatch:*
            - s3:*
            - cloudformation:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
  CodePipeline:
    DependsOn:
      - EC2Instance
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !Sub '${CodePipelineIAMRole.Arn}'
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy 
              Owner: AWS 
              Version: 1 
              Provider: CodeDeploy
            InputArtifacts:
            - Name: SourceOutput
            Configuration:
              ApplicationName: !Ref Application
              DeploymentGroupName: !Ref DeploymentGroup
        - Name: Test
          Actions:
          - Name: Test
            ActionTypeId:
              Category: Invoke 
              Owner: AWS 
              Version: 1 
              Provider: Lambda
            Configuration:
              FunctionName: !Ref TestLambda
              UserParameters: !Sub 'http://${EC2Instance.PublicDnsName}'
  CodeDeployIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codedeploy.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
  Application:
    Type: "AWS::CodeDeploy::Application"
  DeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref Application
      Ec2TagFilters:
        - Key: DeploymentGroup
          Type: KEY_AND_VALUE
          Value: !Ref AWS::StackName
      ServiceRoleArn: !Sub '${CodeDeployIAMRole.Arn}'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'static website'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - FromPort: 80
        ToPort: 80
        IpProtocol: tcp
        CidrIp: '0.0.0.0/0'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref EC2InstanceIAMRole
  EC2InstanceIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy'
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      SecurityGroupIds:
      - !Ref SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          yum update -y && yum install -y ruby wget && wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install && chmod +x ./install && ./install auto && service codedeploy-agent start
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance
      SubnetId: !Ref Subnet
      Tags:
      - Key: DeploymentGroup
        Value: !Ref AWS::StackName
      - Key: Name
        Value: !Ref AWS::StackName
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: codepipeline
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - codepipeline:PutJobFailureResult
            - codepipeline:PutJobSuccessResult
            Resource: "*"
            Effect: Allow
  TestLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        S3Bucket: !Ref BucketName
        S3Key: 'lambda.zip'
      FunctionName: 'codepipeline_http_test'
      Handler: 'index.handler'
      MemorySize: 128
      Role: !Sub '${LambdaIAMRole.Arn}'
      Runtime: 'nodejs8.10'
      Timeout: 30
Outputs:
  URL:
    Description: 'The URL pointing to the static website.'
    Value: !Sub 'http://${EC2Instance.PublicDnsName}'
